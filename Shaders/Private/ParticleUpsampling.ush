// when using a template ush file, we need the _{ParameterName} appendix on global functions and parameters, because the template can be included multiple times for different data interfaces in a system.

#include "/AGXShadersShaders/ConstantsAndStructs.ush"
#include "/AGXShadersShaders/ParticleUpsamplingUtils.ush"

// Particle Buffers
StructuredBuffer<float4>            {ParameterName}_ActiveVoxelIndices;
StructuredBuffer<float4>            {ParameterName}_CPPositionsAndRadius;
StructuredBuffer<float4>            {ParameterName}_CPVelocitiesAndMasses;
int                                 {ParameterName}_NumActiveVoxels;
int                                 {ParameterName}_NumCoarseParticles;

float                               {ParameterName}_VoxelSize;
float                               {ParameterName}_FineParticleMass;
float                               {ParameterName}_FineParticleRadius;
float                               {ParameterName}_NominalRadius;


//int                                 {ParameterName}_Time;
//float                               {ParameterName}_TimeStep;
//float                               {ParameterName}_AnimationSpeed;

// HashTable Buffers
//RWStructuredBuffer<VoxelEntry>      {ParameterName}_HashTableBuffer;
//RWStructuredBuffer<uint>            {ParameterName}_HashTableOccupancy;
//uint                                {ParameterName}_TableSize;

void GetFineParticlePositionAndRadius_{ParameterName}(in int In_Index, out float4 Out_FineParticlePositionAndRadius)
{
    Out_FineParticlePositionAndRadius = {ParameterName}_CPPositionsAndRadius[In_Index];
}

void GetFineParticleVelocityAndMass_{ParameterName}(in int In_Index, out float4 Out_FineParticleVelocityAndMass)
{
    Out_FineParticleVelocityAndMass = {ParameterName}_CPVelocitiesAndMasses[In_Index];
}

void GetNumCoarseParticles_{ParameterName}(out int Out_NumCoarseParticles)
{
    Out_NumCoarseParticles = {ParameterName}_NumCoarseParticles;
}

void GetActiveVoxelIndex_{ParameterName}(in int In_Index, out float3 Out_ActiveVoxelIndex)
{
    Out_ActiveVoxelIndex = {ParameterName}_ActiveVoxelIndices[In_Index].xyz;
}

void GetFineParticleRadius_{ParameterName}(out float Out_FineParticleRadius)
{
    Out_FineParticleRadius = {ParameterName}_FineParticleRadius;
}