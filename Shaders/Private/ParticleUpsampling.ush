#define EMPTY 0
#define TAKEN 1
#define NAN asfloat(0xffffffff)
#define UNDEFINED_INT -2147483647
#define UNDEFINED_FLOAT3 float3(340000000000000000000000000000000.0f, 340000000000000000000000000000000.0f, 340000000000000000000000000000000.0f)

#define VOLUME_MOD 1.6119919540164696407169668466392849389446140723238615

// Particle Buffers
StructuredBuffer<float4>            {ParameterName}_ActiveVoxelIndices;
StructuredBuffer<float4>            {ParameterName}_CPPositionsAndRadius;
StructuredBuffer<float4>            {ParameterName}_CPVelocitiesAndMasses;
int                                 {ParameterName}_NumActiveVoxels;
int                                 {ParameterName}_NumCoarseParticles;

float                               {ParameterName}_VoxelSize;
float                               {ParameterName}_FineParticleMass;
float                               {ParameterName}_FineParticleRadius;
float                               {ParameterName}_NominalRadius;
int                                 {ParameterName}_Time;
float                               {ParameterName}_TimeStep;
float                               {ParameterName}_AnimationSpeed;

// HashTable Buffers
RWStructuredBuffer<float4>          {ParameterName}_HTIndexAndRoom;
RWStructuredBuffer<int>             {ParameterName}_HTOccupancy;
int                                 {ParameterName}_TableSize;

void LookupRoom_{ParameterName}(in int In_Index, out int Out_Room, out bool Out_Success)
{
    int MyId = In_Index;
    Out_Room = UNDEFINED_INT;
    if ({ParameterName}_HTOccupancy[MyId] == TAKEN)
    {
        Out_Room = {ParameterName}_HTIndexAndRoom[MyId].w;
        Out_Success = true;
    }
    else
    {
        Out_Room = 1337;
        Out_Success = false;
    }
}

void InsertIndex_{ParameterName}(in int In_Index, in int In_Room, out int Out_Prev, out bool Out_Success)
{
    int MyId = In_Index;
    
    int Prev;    
    InterlockedCompareExchange({ParameterName}_HTOccupancy[MyId], EMPTY, TAKEN, Prev);
    if (Prev == EMPTY)
    {
        {ParameterName}_HTIndexAndRoom[MyId] = float4(MyId, MyId, MyId, In_Room);
        Out_Success = true;
        Out_Prev = 333;
    }
    else
    {
        float Room = {ParameterName}_HTIndexAndRoom[MyId].w;
        {ParameterName}_HTIndexAndRoom[MyId] = float4(MyId, MyId, MyId, Room+1);
        Out_Success = false;
        Out_Prev = 999;
    }
}

// Updates the grid in the world, run PER VOXEL
void UpdateGrid_{ParameterName}(in int In_Index)
{
    uint MyId = In_Index;
    if ((int)MyId >= {ParameterName}_NumActiveVoxels)
        return;
    
    int3 VoxelIndex = {ParameterName}_ActiveVoxelIndices[MyId].xyz;
    float VoxelSize = {ParameterName}_VoxelSize;
    float3 VoxelPos = VoxelIndex * VoxelSize;
    bool _;
    InsertIndex_{ParameterName}(VoxelIndex, 1, _);
    return;
}

void GetFineParticlePositionAndRadius_{ParameterName}(in int In_Index, out float4 Out_FineParticlePositionAndRadius)
{
    Out_FineParticlePositionAndRadius = {ParameterName}_CPPositionsAndRadius[In_Index];
}

void GetFineParticleVelocityAndMass_{ParameterName}(in int In_Index, out float4 Out_FineParticleVelocityAndMass)
{
    Out_FineParticleVelocityAndMass = {ParameterName}_CPVelocitiesAndMasses[In_Index];
}

void GetNumCoarseParticles_{ParameterName}(out int Out_NumCoarseParticles)
{
    Out_NumCoarseParticles = {ParameterName}_NumCoarseParticles;
}

void GetActiveVoxelIndex_{ParameterName}(in int In_Index, out float3 Out_ActiveVoxelIndex)
{
    Out_ActiveVoxelIndex = {ParameterName}_ActiveVoxelIndices[In_Index].xyz;
}

void GetFineParticleRadius_{ParameterName}(out float Out_FineParticleRadius)
{
    Out_FineParticleRadius = {ParameterName}_FineParticleRadius;
}