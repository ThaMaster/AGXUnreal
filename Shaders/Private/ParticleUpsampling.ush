// when using a template ush file, we need the _{ParameterName} appendix on global functions and parameters, because the template can be included multiple times for different data interfaces in a system.

#include "/AGXShadersShaders/ConstantsAndStructs.ush"
#include "/AGXShadersShaders/ParticleUpsamplingUtils.ush"

// Particle Buffers
StructuredBuffer<int4>              {ParameterName}_ActiveVoxelIndices;
StructuredBuffer<CoarseParticle>    {ParameterName}_CoarseParticles;
int                                 {ParameterName}_NumActiveVoxels;
int                                 {ParameterName}_NumCoarseParticles;
int                                 {ParameterName}_Time;
float                               {ParameterName}_TimeStep;
float                               {ParameterName}_VoxelSize;
float                               {ParameterName}_FineParticleMass;
float                               {ParameterName}_AnimationSpeed;
float                               {ParameterName}_NominalRadius;

// HashTable Buffers
RWStructuredBuffer<VoxelEntry>      {ParameterName}_HashTableBuffer;
RWStructuredBuffer<uint>            {ParameterName}_HashTableOccupancy;
uint                                {ParameterName}_TableSize;


float2 Dostuff(in bool norm, in float4 di_pos)
{
    float2 pos = float2(0.0, 0.0);
    if (norm)
    {
        pos.x = di_pos.x / di_pos.z;
        pos.y = di_pos.y / di_pos.w;
    }
    else
    {
        pos.x = di_pos.x;
        pos.y = di_pos.y;
    }
    return pos;
}

void GetMousePosition_{ParameterName}(in bool In_Normalized, out float Out_PosX, out float Out_PosY)
{
	float4 DIPosition = {ParameterName}_CoarseParticles[0].PositionAndRadius;
    float2 Position = Dostuff(In_Normalized, DIPosition);
    Out_PosX = Position.x;
    Out_PosY = Position.y;
}

void GetFineParticlePosition_{ParameterName}(in int In_Index, out float3 Out_FineParticlePosition)
{
    Out_FineParticlePosition = {ParameterName}_CoarseParticles[In_Index].PositionAndRadius.xyz;
}
